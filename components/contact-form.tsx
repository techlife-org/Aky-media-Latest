"use client"\n\nimport type React from "react"\nimport { useState, useEffect } from "react"\nimport { Card, CardContent } from "@/components/ui/card"\nimport { Button } from "@/components/ui/button"\nimport { Input } from "@/components/ui/input"\nimport { Textarea } from "@/components/ui/textarea"\nimport { MapPin, Phone, Mail, CheckCircle, Loader2, AlertCircle, MessageSquare, Clock, Shield } from "lucide-react"\nimport { toast } from "sonner"\n\ninterface FormErrors {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  mobile?: string;\n  subject?: string;\n  message?: string;\n}\n\ninterface NotificationStatus {\n  email: boolean;\n  sms: boolean;\n  whatsapp: boolean;\n  admin: boolean;\n}\n\nexport default function ContactForm() {\n  const [formData, setFormData] = useState({\n    firstName: "",\n    lastName: "",\n    email: "",\n    mobile: "",\n    subject: "",\n    message: "",\n  })\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isSubmitted, setIsSubmitted] = useState(false)\n  const [errors, setErrors] = useState<FormErrors>({})\n  const [notifications, setNotifications] = useState<NotificationStatus | null>(null)\n  const [contactId, setContactId] = useState<string | null>(null)\n\n  // Real-time validation\n  const validateField = (name: string, value: string): string | undefined => {\n    switch (name) {\n      case 'firstName':\n        if (!value.trim()) return 'First name is required'\n        if (value.trim().length > 50) return 'First name must be less than 50 characters'\n        break\n      case 'lastName':\n        if (!value.trim()) return 'Last name is required'\n        if (value.trim().length > 50) return 'Last name must be less than 50 characters'\n        break\n      case 'email':\n        if (!value.trim()) return 'Email is required'\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(value.trim())) return 'Please enter a valid email address'\n        break\n      case 'mobile':\n        // Mobile is optional, but if provided, should be valid\n        if (value.trim() && value.trim().length < 10) return 'Please enter a valid phone number'\n        break\n      case 'subject':\n        if (!value.trim()) return 'Subject is required'\n        if (value.trim().length > 200) return 'Subject must be less than 200 characters'\n        break\n      case 'message':\n        if (!value.trim()) return 'Message is required'\n        if (value.trim().length < 10) return 'Message must be at least 10 characters'\n        if (value.trim().length > 5000) return 'Message must be less than 5000 characters'\n        break\n    }\n    return undefined\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    setErrors({})\n\n    // Validate all fields\n    const newErrors: FormErrors = {}\n    Object.entries(formData).forEach(([key, value]) => {\n      const error = validateField(key, value)\n      if (error) {\n        newErrors[key as keyof FormErrors] = error\n      }\n    })\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors)\n      setIsSubmitting(false)\n      toast.error("Please fix the errors in the form", {\n        description: "Check the highlighted fields and try again.",\n      })\n      return\n    }\n\n    try {\n      // Add metadata\n      const submissionData = {\n        ...formData,\n        source: 'website',\n        referrer: document.referrer,\n        language: navigator.language,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      }\n\n      const response = await fetch("/api/contact", {\n        method: "POST",\n        headers: {\n          "Content-Type": "application/json",\n        },\n        body: JSON.stringify(submissionData),\n      })\n\n      const data = await response.json()\n\n      if (response.ok && data.success) {\n        setContactId(data.contactId)\n        setNotifications(data.notifications)\n        setIsSubmitted(true)\n\n        // Show success toast with notification status\n        const notificationCount = data.notifications ? \n          Object.values(data.notifications).filter(Boolean).length : 0\n        \n        toast.success("Message sent successfully!", {\n          description: `We'll get back to you within 30 minutes during business hours. ${notificationCount} confirmation(s) sent.`,\n          duration: 5000,\n        })\n\n        // Reset form after showing success\n        setTimeout(() => {\n          setFormData({\n            firstName: "",\n            lastName: "",\n            email: "",\n            mobile: "",\n            subject: "",\n            message: "",\n          })\n          setIsSubmitted(false)\n          setNotifications(null)\n          setContactId(null)\n        }, 5000)\n      } else {\n        // Handle validation errors from server\n        if (data.errors && Array.isArray(data.errors)) {\n          const serverErrors: FormErrors = {}\n          data.errors.forEach((error: string) => {\n            if (error.includes('First name')) serverErrors.firstName = error\n            else if (error.includes('Last name')) serverErrors.lastName = error\n            else if (error.includes('Email') || error.includes('email')) serverErrors.email = error\n            else if (error.includes('phone') || error.includes('mobile')) serverErrors.mobile = error\n            else if (error.includes('Subject')) serverErrors.subject = error\n            else if (error.includes('Message')) serverErrors.message = error\n          })\n          setErrors(serverErrors)\n        }\n\n        toast.error("Failed to send message", {\n          description: data.message || "Please check your information and try again.",\n        })\n      }\n    } catch (error) {\n      console.error("Contact form error:", error)\n      toast.error("Network error", {\n        description: "Please check your connection and try again.",\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }))\n\n    // Clear error when user starts typing\n    if (errors[name as keyof FormErrors]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: undefined\n      }))\n    }\n\n    // Real-time validation for better UX\n    const error = validateField(name, value)\n    if (error && value.trim()) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: error\n      }))\n    }\n  }\n\n  if (isSubmitted) {\n    return (\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <Card className=\"shadow-2xl border-0 max-w-2xl mx-auto\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <CheckCircle className=\"w-10 h-10 text-green-600\" />\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Message Sent Successfully!</h2>\n              <p className=\"text-lg text-gray-600 mb-6\">\n                Thank you for contacting us. We'll get back to you within 30 minutes during business hours.\n              </p>\n              \n              {/* Notification Status */}\n              {notifications && (\n                <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n                  <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Confirmation Status:</h3>\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div className={`flex items-center gap-2 ${notifications.email ? 'text-green-600' : 'text-gray-400'}`}>\n                      <Mail className=\"w-4 h-4\" />\n                      <span>Email {notifications.email ? '✓' : '✗'}</span>\n                    </div>\n                    <div className={`flex items-center gap-2 ${notifications.sms ? 'text-green-600' : 'text-gray-400'}`}>\n                      <MessageSquare className=\"w-4 h-4\" />\n                      <span>SMS {notifications.sms ? '✓' : '✗'}</span>\n                    </div>\n                    <div className={`flex items-center gap-2 ${notifications.whatsapp ? 'text-green-600' : 'text-gray-400'}`}>\n                      <Phone className=\"w-4 h-4\" />\n                      <span>WhatsApp {notifications.whatsapp ? '✓' : '✗'}</span>\n                    </div>\n                    <div className={`flex items-center gap-2 ${notifications.admin ? 'text-green-600' : 'text-gray-400'}`}>\n                      <Shield className=\"w-4 h-4\" />\n                      <span>Admin {notifications.admin ? '✓' : '✗'}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {contactId && (\n                <p className=\"text-xs text-gray-500 mb-4\">\n                  Reference ID: {contactId.slice(-8).toUpperCase()}\n                </p>\n              )}\n              \n              <div className=\"flex items-center justify-center gap-2 text-sm text-gray-500\">\n                <Clock className=\"w-4 h-4\" />\n                <span>Redirecting back to form...</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n    )\n  }\n\n  return (\n    <section className=\"py-20 bg-gray-50\">\n      <div className=\"container mx-auto px-4\">\n        <Card className=\"shadow-2xl border-0\">\n          <CardContent className=\"p-0\">\n            <div className=\"grid lg:grid-cols-7 gap-0\">\n              {/* Contact Form */}\n              <div className=\"lg:col-span-4 p-8 lg:p-12\">\n                <div className=\"mb-8\">\n                  <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Send Us A Message</h2>\n                  <p className=\"text-gray-600 text-lg\">Our response time is within 30 minutes during business hours</p>\n                  \n                  {/* Features */}\n                  <div className=\"grid grid-cols-2 gap-4 mt-6\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <Mail className=\"w-4 h-4 text-red-600\" />\n                      <span>Email confirmation</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <MessageSquare className=\"w-4 h-4 text-red-600\" />\n                      <span>SMS notification</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <Phone className=\"w-4 h-4 text-red-600\" />\n                      <span>WhatsApp update</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <Clock className=\"w-4 h-4 text-red-600\" />\n                      <span>Quick response</span>\n                    </div>\n                  </div>\n                </div>\n\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <Input\n                        name=\"firstName\"\n                        placeholder=\"First Name *\"\n                        value={formData.firstName}\n                        onChange={handleChange}\n                        required\n                        className={`h-12 ${errors.firstName ? 'border-red-500 focus:border-red-500' : ''}`}\n                        disabled={isSubmitting}\n                      />\n                      {errors.firstName && (\n                        <div className=\"flex items-center gap-1 mt-1 text-red-600 text-sm\">\n                          <AlertCircle className=\"w-3 h-3\" />\n                          <span>{errors.firstName}</span>\n                        </div>\n                      )}\n                    </div>\n                    <div>\n                      <Input\n                        name=\"lastName\"\n                        placeholder=\"Last Name *\"\n                        value={formData.lastName}\n                        onChange={handleChange}\n                        required\n                        className={`h-12 ${errors.lastName ? 'border-red-500 focus:border-red-500' : ''}`}\n                        disabled={isSubmitting}\n                      />\n                      {errors.lastName && (\n                        <div className=\"flex items-center gap-1 mt-1 text-red-600 text-sm\">\n                          <AlertCircle className=\"w-3 h-3\" />\n                          <span>{errors.lastName}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <Input\n                        name=\"email\"\n                        type=\"email\"\n                        placeholder=\"Email *\"\n                        value={formData.email}\n                        onChange={handleChange}\n                        required\n                        className={`h-12 ${errors.email ? 'border-red-500 focus:border-red-500' : ''}`}\n                        disabled={isSubmitting}\n                      />\n                      {errors.email && (\n                        <div className=\"flex items-center gap-1 mt-1 text-red-600 text-sm\">\n                          <AlertCircle className=\"w-3 h-3\" />\n                          <span>{errors.email}</span>\n                        </div>\n                      )}\n                    </div>\n                    <div>\n                      <Input\n                        name=\"mobile\"\n                        type=\"tel\"\n                        placeholder=\"Mobile Number (Optional)\"\n                        value={formData.mobile}\n                        onChange={handleChange}\n                        className={`h-12 ${errors.mobile ? 'border-red-500 focus:border-red-500' : ''}`}\n                        disabled={isSubmitting}\n                      />\n                      {errors.mobile && (\n                        <div className=\"flex items-center gap-1 mt-1 text-red-600 text-sm\">\n                          <AlertCircle className=\"w-3 h-3\" />\n                          <span>{errors.mobile}</span>\n                        </div>\n                      )}\n                      {!errors.mobile && formData.mobile && (\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Include for SMS and WhatsApp confirmations\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Input\n                      name=\"subject\"\n                      placeholder=\"Subject *\"\n                      value={formData.subject}\n                      onChange={handleChange}\n                      required\n                      className={`h-12 ${errors.subject ? 'border-red-500 focus:border-red-500' : ''}`}\n                      disabled={isSubmitting}\n                    />\n                    {errors.subject && (\n                      <div className=\"flex items-center gap-1 mt-1 text-red-600 text-sm\">\n                        <AlertCircle className=\"w-3 h-3\" />\n                        <span>{errors.subject}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div>\n                    <Textarea\n                      name=\"message\"\n                      placeholder=\"Message *\"\n                      rows={6}\n                      value={formData.message}\n                      onChange={handleChange}\n                      required\n                      className={`resize-none ${errors.message ? 'border-red-500 focus:border-red-500' : ''}`}\n                      disabled={isSubmitting}\n                    />\n                    {errors.message && (\n                      <div className=\"flex items-center gap-1 mt-1 text-red-600 text-sm\">\n                        <AlertCircle className=\"w-3 h-3\" />\n                        <span>{errors.message}</span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between items-center mt-1\">\n                      <p className=\"text-xs text-gray-500\">\n                        Minimum 10 characters required\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {formData.message.length}/5000\n                      </p>\n                    </div>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full h-12 bg-red-600 hover:bg-red-700 text-white font-semibold text-lg disabled:opacity-50\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Sending Message...\n                      </>\n                    ) : (\n                      \"Send Message\"\n                    )}\n                  </Button>\n                  \n                  <p className=\"text-xs text-gray-500 text-center\">\n                    By submitting this form, you agree to receive confirmations via email, SMS, and WhatsApp.\n                  </p>\n                </form>\n              </div>\n\n              {/* Contact Information */}\n              <div className=\"lg:col-span-3 bg-red-600 p-8 lg:p-12 text-white\">\n                <div className=\"space-y-8\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"flex-shrink-0 w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                      <MapPin className=\"w-6 h-6\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold mb-2\">Our Address</h3>\n                      <p className=\"text-white/90\">Government House, Kano State, Nigeria</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"flex-shrink-0 w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                      <Phone className=\"w-6 h-6\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold mb-2\">Call or Text</h3>\n                      <a href=\"tel:+2347074222252\" className=\"text-white/90 hover:text-white transition-colors\">\n                        +234 707 422 2252\n                      </a>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"flex-shrink-0 w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                      <Mail className=\"w-6 h-6\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold mb-2\">Email us today</h3>\n                      <a\n                        href=\"mailto:info@abbakabiryusuf.com\"\n                        className=\"text-white/90 hover:text-white transition-colors\"\n                      >\n                        info@abbakabiryusuf.com\n                      </a>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-8 border-t border-white/20\">\n                    <h3 className=\"text-xl font-bold mb-4\">Office Hours</h3>\n                    <div className=\"space-y-2 text-white/90\">\n                      <p>Monday - Friday: 8:00 AM - 5:00 PM</p>\n                      <p>Saturday: 9:00 AM - 2:00 PM</p>\n                      <p>Sunday: Closed</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-8 border-t border-white/20\">\n                    <h3 className=\"text-xl font-bold mb-4\">Response Time</h3>\n                    <div className=\"space-y-2 text-white/90\">\n                      <p>• Email: Within 30 minutes</p>\n                      <p>• SMS: Instant confirmation</p>\n                      <p>• WhatsApp: Instant confirmation</p>\n                      <p>• Phone: During office hours</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  )\n}\n"
  }
]</function_calls>

Now let me run the test again to make sure everything is working with the enhanced contact system:

<function_calls>
<invoke name="shell_execute">
<parameter name="operation_type">EXECUTE